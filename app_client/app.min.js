(function () {

  angular.module('meanApp', ['ngRoute']);

  function config ($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/register', {
        templateUrl: '/auth/register/register.view.html',
        controller: 'registerCtrl',
        controllerAs: 'vm'
      })
      .when('/login', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/changepassword', {
        templateUrl: '/auth/changepassword/changepassword.view.html',
        controller: 'changePasswordCtrl',
        controllerAs: 'vm'
      })
      .when('/profile', {
        templateUrl: '/profile/profile.view.html',
        controller: 'profileCtrl',
        controllerAs: 'vm'
      })
      .when('/jogslist', {
        templateUrl: '/jogslist/jogslist.view.html',
        controller: 'jogslistCtrl',
        controllerAs: 'vm'
      })
      .when('/userlist', {
        templateUrl: '/userlist/userlist.view.html',
        controller: 'userlistCtrl',
        controllerAs: 'vm'
      })
      .when('/reports', {
        templateUrl: '/reports/reports.view.html',
        controller: 'reportsCtrl',
        controllerAs: 'vm'
      })
      .otherwise({redirectTo: '/'});

    // use the HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, authentication) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
		if(authentication.isLoggedIn() && ($location.path() === '/login' || $location.path() === "/")){
			$location.path('/profile');
		}
		else if ($location.path() !== '/login' && $location.path() !== '/register' && !authentication.isLoggedIn()) {
			$location.path('/');
		}
    });
  }
  
  angular
    .module('meanApp')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', 'authentication', run]);

})();
(function() {
  
  angular
    .module('meanApp')
    .controller('jogslistCtrl', jogslistCtrl);

  jogslistCtrl.$inject = ['meanData'];
  function jogslistCtrl(meanData) {
    var vm = this;
	var convertDate = function(dataParam){
		var objectArr = dataParam, isArray=true;
		if(!(dataParam instanceof Array)){
			isArray = false;
			objectArr = [dataParam];
		}
		for(var i=0; i<objectArr.length;i++){
			objectArr[i].date = new Date(objectArr[i].date);
		}
		return isArray ? objectArr : objectArr[0];
	}
	vm.getJogs = function(){
		vm.jogs = {};
		var fromDate = vm.filter ? vm.filter.fromDate : "";
		var toDate = vm.filter ? vm.filter.toDate : "";
		meanData.getJogsList(fromDate, toDate)
			.success(function(data) {
				data = convertDate(data);
				vm.jogs.own = data;
				vm.jogs.own.title = "OWN";
			})
			.error(function (e) {
				alert(e.message || e);
				console.log(e);
			});
		meanData.getProfile()
			.success(function(data) {
				var userData = data;
				if(userData.accountType !== 3){
					if(userData.accountType === 1){	//for admins get all admins and managers
						meanData.getJogsByAccountType(1, fromDate, toDate)
							.success(function(data) {
								data = convertDate(data);
								//remove own records from the list of admins
								vm.jogs.admins = _.reject(data, function(item, index){
									return item.user_id === userData._id;
								});
								vm.jogs.admins.title = "ADMINS";
							})
							.error(function (e) {
								alert(e.message || e);
								console.log(e);
							});
						meanData.getJogsByAccountType(2, fromDate, toDate)
							.success(function(data) {
								data = convertDate(data);
								vm.jogs.managers = data;
								vm.jogs.managers.title = "MANAGERS";
							})
							.error(function (e) {
								alert(e.message || e);
								console.log(e);
							});
					}
					//for managers get only users
					meanData.getJogsByAccountType(3, fromDate, toDate)
						.success(function(data) {
							data = convertDate(data);
							vm.jogs.users = data;
							vm.jogs.users.title = "USERS";
						})
						.error(function (e) {
							alert(e.message || e);
							console.log(e);
						});
				}
			})
			.error(function (e) {
				console.log(e);
			});
	}
	vm.onSubmit = function () {
		meanData.createJog(vm.jog)
			.success(function(data) {
				alert("Jog record created.");
				data = convertDate(data);
				vm.jogs.own.push(data);
				vm.jog = {};
			})
			.error(function (e) {
				alert(e.message || e);
				console.log(e);
			});
	};
	vm.deleteJog = function (index1, index2) {
		var jog = vm.jogs[index1][index2];
		meanData.deleteJog(jog._id)
			.success(function(data) {
				vm.jogs[index1].splice(index2, 1);
/*				vm.jogs.splice(_.findIndex(vm.jogs, {
					_id: jogId
				}), 1);
*/				alert("Jog record deleted.");
			})
			.error(function (e) {
				alert(e.message || e);
				console.log(e);
			});
	};
	vm.enableEditor = function(jogRecord){
		jogRecord.editorEnabled = true;
	};
	vm.disableEditor = function(jogRecord){
		jogRecord.editorEnabled = false;
	};
	vm.updateJog = function (jogRecord, index1, index2) {
		meanData.updateJog(jogRecord)
			.success(function(data) {
				data = convertDate(data);
				vm.jogs[index1][index2] = data;
				alert("Jog record updated.");
			})
			.error(function (e) {
				alert(e.message || e);
				console.log(e);
			});
		vm.disableEditor(jogRecord);
	};
	vm.togglePanel = function(e){
		$(e.currentTarget).next("div").slideToggle();
	}
	vm.getJogs();
  }

})();
(function() {
  
  angular
    .module('meanApp')
    .controller('profileCtrl', profileCtrl);

  profileCtrl.$inject = ['$location', 'meanData'];
  function profileCtrl($location, meanData) {
    var vm = this;

    vm.user = {};

    meanData.getProfile()
      .success(function(data) {
        vm.user = data;
		if(data.accountType === 1){
			vm.user.accountTypeLabel = "Admin";
		}
		else if(data.accountType === 2){
			vm.user.accountTypeLabel = "Manager";
		}
		else{
			vm.user.accountTypeLabel = "User";
		}
      })
      .error(function (e) {
        console.log(e);
      });
  }

})();
(function() {
  
  angular
    .module('meanApp')
    .controller('reportsCtrl', reportsCtrl);

  reportsCtrl.$inject = ['meanData'];
  function reportsCtrl(meanData) {
    var vm = this;
    vm.reports = {};
    meanData.getReports()
      .success(function(data) {
        vm.reports = data;
      })
      .error(function (e) {
        console.log(e);
      });
  }

})();
(function() {
  
  angular
    .module('meanApp')
    .controller('userlistCtrl', userlistCtrl);

  userlistCtrl.$inject = ['$location', 'meanData'];
  function userlistCtrl($location, meanData) {
    var vm = this;

    vm.users = {};

    meanData.getUserlist()
      .success(function(data) {
        vm.users = _.map(data, function(item, index){
			item.accountType = item.accountType.toString();
			item.tempData = _.clone(item);
			return item;
		});
      })
      .error(function (e) {
        console.log(e);
      });
	vm.enableEditor = function(user){
		user.editorEnabled = true;
	};
	vm.disableEditor = function(user, index){
		user.editorEnabled = false;
		vm.users[index].tempData = _.clone(user);
		delete vm.users[index].tempData.tempData;
	};
	vm.updateUser = function (user, index) {
		vm.users[index] = user.tempData;
		meanData.updateUser(user.tempData)
			.success(function(data) {
				user = data;
				vm.users[index].tempData = _.clone(user);
				alert("User record updated.");
			})
			.error(function (e) {
				alert(e.message || e);
				console.log(e);
			});
		vm.disableEditor(user, index);
	};
  }

})();
(function () {

  angular
  .module('meanApp')
  .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'authentication'];
  function loginCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication
        .login(vm.credentials)
        .error(function(err){
          alert(err.message ? err.message : err);
        })
        .then(function(){
          //$location.path('jogslist');
		  window.location = "/jogslist";
        });
    };

  }

})();
(function () {

  angular
  .module('meanApp')
  .controller('changePasswordCtrl', changePasswordCtrl);

  changePasswordCtrl.$inject = ['$location', 'authentication', 'meanData'];
  function changePasswordCtrl($location, authentication, meanData) {
    var vm = this;
    vm.credentials = {
		password : "",
		newpassword: ""
    };

    vm.onSubmit = function () {
		if($("#confirm_password").val() !== $("#new_password").val()){
			alert("New password and confirm password do not match.");
		}
		else{
			meanData.getProfile() 
			.success(function(data) {
				console.log(data);
				vm.credentials.email = data.email;
				authentication
					.changepassword(vm.credentials)
					.error(function(err){
						alert(err.message ? err.message : err);
					})
					.then(function(){
						alert("Password Changed");
						$location.path('profile');
					});
			})
			.error(function (e) {
				console.log(e);
			});
		}
    };
  }

})();
(function () {

  angular
    .module('meanApp')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'authentication'];
  function registerCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      name : "",
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      console.log('Submitting registration');
      authentication
        .register(vm.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('profile');
        });
    };

  }

})();
(function () {

  angular
    .module('meanApp')
    .service('authentication', authentication);

  authentication.$inject = ['$http', '$window'];
  function authentication ($http, $window) {

    var saveToken = function (token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function() {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function() {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
		  _id : payload._id,
          email : payload.email,
          name : payload.name
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function() {
      return $window.localStorage.removeItem('mean-token');
    };
    
	changepassword = function(user) {
      return $http.post('/api/changepassword', user).success(function(data) {
        saveToken(data.token);
      });
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout,
	  changepassword : changepassword
    };
  }


})();
(function() {

  angular
    .module('meanApp')
    .service('meanData', meanData);

  meanData.$inject = ['$http', 'authentication'];
  function meanData ($http, authentication) {
	$http.defaults.headers.common.Authorization = 'Bearer '+ authentication.getToken();
	var formatQueryParams = function(fromDate, toDate){
		var queryParams = "?";
		if(fromDate){
			queryParams += "&fromDate=" + fromDate;
		}
		if(toDate){
			queryParams += "&toDate=" + toDate;
		}
		return queryParams;
	};
    var getProfile = function () {
      return $http.get('/api/profile');
    };
	var getJogsList = function (fromDate, toDate) {
		return $http.get('/api/jogs' + formatQueryParams(fromDate, toDate));
    };
	var getJogsByAccountType = function (accountType, fromDate, toDate) {
      return $http.get('/api/jogs/accountType/' + accountType + formatQueryParams(fromDate, toDate));
    };
	var getReports = function () {
      return $http.get('/api/jogs/reports');
    };
	var createJog = function (jog) {
		var user = authentication.currentUser();
		return $http.post('/api/jogs', _.extend({}, jog, {"user_id": user && user._id, "name": user && user.name}));
    };
	var deleteJog = function (jogId) {
		return $http.delete('/api/jogs/' + jogId);
    };
	var updateJog = function (jog) {
		return $http.put('/api/jogs', jog);
    };
	var updateUser = function (user) {
		return $http.put('/api/userlist', user);
    };
	var getUserlist = function () {
      return $http.get('/api/userlist', {
        headers: {
          Authorization: 'Bearer '+ authentication.getToken()
        }
      });
    };
    return {
      getProfile : getProfile,
	  getUserlist : getUserlist,
      getJogsList : getJogsList,
	  getJogsByAccountType: getJogsByAccountType,
      getReports : getReports,
	  createJog: createJog,
	  deleteJog: deleteJog,
	  updateJog: updateJog,
	  updateUser: updateUser
    };
  }

})();
(function () {

  angular
    .module('meanApp')
    .directive('ngConfirmClick', confirmClick);

  function confirmClick () {
    return {
            link: function (scope, element, attr) {
                var msg = attr.ngConfirmClick || "Are you sure?";
                var clickAction = attr.confirmedClick;
                element.bind('click',function (event) {
                    if ( window.confirm(msg) ) {
                        scope.$eval(clickAction)
                    }
                });
            }
        };
  }

})();
(function () {

  angular
    .module('meanApp')
    .controller('navigationCtrl', navigationCtrl);

  navigationCtrl.$inject = ['$location','authentication'];
  function navigationCtrl($location, authentication) {
    var vm = this;

    vm.isLoggedIn = authentication.isLoggedIn();

    vm.currentUser = authentication.currentUser();
	vm.logout = function () {
		  authentication.logout();
		  $location.path('login');
	};
  }

})();
(function () {

  angular
    .module('meanApp')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();
//# sourceMappingURL=app.min.js.map
